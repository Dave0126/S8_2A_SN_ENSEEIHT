open Semantics
open MiniML

let getValeur (_,v,_) = v

let getType (t,_,_) = t

(* Tests for Value of all the given examples:   FROM /exemples/exemple-00.mml TO /exemples/exemple-13.mml ------- *)
(* Test for additon <Integer>: /exemples/exemple-00.mml*)
let%test _ = ( getValeur (miniML "../../exemples/exemple-00.mml") = (IntegerValue 3) )
(* Test for negative integer: /exemples/exemple-01.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-01.mml") = (IntegerValue (-8)) )
(* Test for "if" function: /exemples/exemple-02.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-02.mml") = (IntegerValue 4) )
(* Test for "let ... in ..." function: /exemples/exemple-03.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-03.mml") = (IntegerValue 5) )
(* Test for "fun" function: /exemples/exemple-04.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-04.mml") = (IntegerValue 1) )
(* Test for "let( fun...) in ..." function: /exemples/exemple-05.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-05.mml") = (IntegerValue 2) )
(* Test for "letrec( fun...) in ..." function: /exemples/exemple-06.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-06.mml") = (IntegerValue 120) )
(* Test for "let( let( let(...))) in ..." function: /exemples/exemple-07.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-07.mml") = (IntegerValue 10) )
(* Test for "let(...) in ..." function: /exemples/exemple-08.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-08.mml") = (IntegerValue 5) )
(* Test for "let( fun...) in ..." function: /exemples/exemple-09.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-09.mml") = (FrozenValue (FunctionNode ("x",AccessNode "x"),[])) )
(* Test for loop function: /exemples/exemple-11.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-11.mml") = (IntegerValue 120) )
(* Test for defination and call of function: /exemples/exemple-12.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-12.mml") = (IntegerValue 120) )
(* Test for Loop Reference Read Write: /exemples/exemple-13.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-13.mml") = (NullValue) )
(* ---------------------------------------------------------------------------------------------------------------- *)

(* Tests for Typage of all the given examples:  FROM /exemples/exemple-00.mml TO /exemples/exemple-13.mml ------- *)
(* Test for additon <Integer>: /exemples/exemple-00.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-00.mml") = IntegerType )
(* Test for negative integer: /exemples/exemple-01.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-01.mml") = IntegerType )
(* Test for "if" function: /exemples/exemple-02.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-02.mml") = IntegerType )
(* Test for "let ... in ..." function: /exemples/exemple-03.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-03.mml") = IntegerType )
(* Test for "fun" function: /exemples/exemple-04.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-04.mml") = IntegerType )
(* Test for "let( fun...) in ..." function: /exemples/exemple-05.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-05.mml") = IntegerType )
(* Test for "letrec( fun...) in ..." function: /exemples/exemple-06.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-06.mml") = IntegerType )
(* Test for "let( let( let(...))) in ..." function: /exemples/exemple-07.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-07.mml") = IntegerType )
(* Test for "let(...) in ..." function: /exemples/exemple-08.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-08.mml") = IntegerType )
(* Test for "let( fun...) in ..." function: /exemples/exemple-09.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-09.mml") = (FunctionType ((VariableType ((ref Types.UnknownType),1)),(VariableType ((ref Types.UnknownType),1)))))
(* Test for loop function: /exemples/exemple-11.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-11.mml") = IntegerType )
(* Test for defination and call of function: /exemples/exemple-12.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-12.mml") = IntegerType )
(* Test for Loop Reference Read Write: /exemples/exemple-13.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-13.mml") = UnitType )
(* ---------------------------------------------------------------------------------------------------------------- *)


(* Extra tests: *)
(* Tests for Boolean:  /exemples/exemple-14.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-14.mml") = (BooleanValue false) )
let%test _ = ( getType (miniML "../../exemples/exemple-14.mml") = Types.BooleanType )

(* Tests for Reference declaration:  /exemples/exemple-15.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-15.mml") = (ReferenceValue "ref@1") )
let%test _ = ( getType (miniML "../../exemples/exemple-15.mml") = Types.ReferenceType Types.IntegerType )

(* Tests for Reference Read:  /exemples/exemple-16.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-16.mml") = (IntegerValue 0) )
let%test _ = ( getType (miniML "../../exemples/exemple-16.mml") = Types.IntegerType )

(* Tests for Boolean Write:  /exemples/exemple-17.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-17.mml") = (IntegerValue 1) )
let%test _ = ( getType (miniML "../../exemples/exemple-17.mml") = Types.IntegerType )

(* Tests for ErrorValue:  /exemples/exemple-18.mml *)
let%test _ = ( getValeur (miniML "../../exemples/exemple-18.mml") = (ErrorValue Semantics.TypeMismatchError) )

(* Tests for ErrorType:  /exemples/exemple-18.mml *)
let%test _ = ( getType (miniML "../../exemples/exemple-18.mml") = Types.ErrorType )
